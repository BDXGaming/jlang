load python.module.json

class object{

    func __init__(self, _value){
        self.value = _value
    }

    func __string__(self){

        // If the string function was never overridden use the inbuilt python string method
        return str(self.value)
    }

    func __str__(self){
        return self.value.__str__()
    }

    func __cls__(){
        return self.__class__
    }

    func reassign(self, value, new_cls=None){

        // Adds support for the reclassing of variables if a new class type is provided
        if new_cls is not None{
            self.value = value
        }
        else{

            // Checks to ensure the class type of the data matches the type of the variable
            if (value.__class__ != self.value.__class__ and self.__class__ != value.__class__){
                raise FixedVariableType(self.__class__, value.__class__)
            }
            else{
                self.value = value
            }
        }
    }

    func to_json(self){
        return json.dumps(self, default=lambda o: o.__dict__)
    }
}


class String(object, str){

    members = {}
    last_key = 0

    func __init__(self, value){
        value = str(value)
        super().__init__(value)
        String.members[String.last_key] = value
        String.last_key += 1
    }
    func __cls__(self){
        return self.__class__
    }
}

class ArrayList(object){

    func __init__(self, _value){
        super().__init__(_value)
        self.array = _value
    }

    func __string__(self){
        string_list = "["

        for index, entry in enumerate(self.array){
            string_list += f"${entry}"

            if index+1 < len(self.array){ string_list += ", "}
        }
        return string(string_list+ "]")

    }

    // This allows for the use of python iteration
    func __iter__(self){
        return self.array.__iter__()
    }

    // This appends the element to the list
    func append(self, entry){
        self.array.append(entry)
    }

    func __add__(self, value){
        self.append(value)
    }

    // The removes the element from the list
    func remove(self, index){
        self.array.remove(index)
    }

    // Returns the python list version of the class
    func __list__(self){
        return self.array
    }

    func __cls__(self){
        return self.__class__
    }

    func to_json(self){
        return json.dumps(self.array)
    }
}

class Integer(object, int){

    func __init__(self, value){

        if(value.__class__ != int and value.__class__ != Integer){
            raise FixedVariableType("")
        }

        super().__init__(value)
    }

    func __cls__(self){
        return self.__class__
    }
}

class Float(object, float){

    func __init__(self, value){

        if(value.__class__ != float and value.__class__ != Float){
            raise FixedVariableType("")
        }

        super().__init__(value)
    }

    func __cls__(self){
        return self.__class__
    }
}

class Map(object, dict){

    func __init__(self, value){

        if(value.__class__ != dict and value.__class__ != Map){
            raise FixedVariableType("")
        }

        super().__init__(value)
    }

    func __cls__(self){
        return self.__class__
    }
}